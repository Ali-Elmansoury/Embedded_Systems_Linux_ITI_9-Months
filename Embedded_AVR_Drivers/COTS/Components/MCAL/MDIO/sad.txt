//
// Created by ali on 12/17/24.
//
#include <stddef.h>
#include "MDIO.h"
#include "../../STD_LIB/BIT_MATH.h"
#include "../../STD_LIB/STD_TYPES.h"

//PORTx
#define PORTA   (*((volatile u8*)0x3B))
#define PORTB   (*((volatile u8*)0x38))
#define PORTC   (*((volatile u8*)0x35))
#define PORTD   (*((volatile u8*)0x32))

//DDRx
#define DDRA   (*((volatile u8*)0x3A))
#define DDRB   (*((volatile u8*)0x37))
#define DDRC   (*((volatile u8*)0x34))
#define DDRD   (*((volatile u8*)0x31))

//PINx
#define PINA   (*((volatile u8*)0x39))
#define PINB   (*((volatile u8*)0x36))
#define PINC   (*((volatile u8*)0x33))
#define PIND   (*((volatile u8*)0x30))

MDIO_enuErrorStatus_t MDIO_enuSetPinConfigration(MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPinNum_t Copy_enuPinNum, MDIO_enuPinCfg_t Copy_enuConfigration) {
    MDIO_enuErrorStatus_t Ret_enuErrorStatus = MDIO_NOK;

    if (Copy_enuPortNum > MDIO_PORTD) {
        Ret_enuErrorStatus = MDIO_INVALID_PORT_NUM;
    }
    else if (Copy_enuPinNum > MDIO_PIN7) {
        Ret_enuErrorStatus = MDIO_INVALID_PIN_NUM;
    }
    else {
        switch (Copy_enuPortNum) {
            case MDIO_PORTA:
                if (Copy_enuConfigration == PIN_INPUT) {
                    CLEAR_BIT(DDRA, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_OUTPUT) {
                    SET_BIT(DDRA, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_INTERNAL_PULL_UP) {
                    CLEAR_BIT(DDRA, Copy_enuPinNum);
                    SET_BIT(PORTA, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_EXTERNAL_PULL_DOWN) {
                    CLEAR_BIT(DDRA, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else {
                    Ret_enuErrorStatus = MDIO_INVALID_PIN_CFG;
                }
                break;

            case MDIO_PORTB:
                if (Copy_enuConfigration == PIN_INPUT) {
                    CLEAR_BIT(DDRB, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_OUTPUT) {
                    SET_BIT(DDRB, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_INTERNAL_PULL_UP) {
                    CLEAR_BIT(DDRB, Copy_enuPinNum);
                    SET_BIT(PORTB, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_EXTERNAL_PULL_DOWN) {
                    CLEAR_BIT(DDRB, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else {
                    Ret_enuErrorStatus = MDIO_INVALID_PIN_CFG;
                }
                break;

            case MDIO_PORTC:
                if (Copy_enuConfigration == PIN_INPUT) {
                    CLEAR_BIT(DDRC, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_OUTPUT) {
                    SET_BIT(DDRC, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_INTERNAL_PULL_UP) {
                    CLEAR_BIT(DDRC, Copy_enuPinNum);
                    SET_BIT(PORTC, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_EXTERNAL_PULL_DOWN) {
                    CLEAR_BIT(DDRC, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else {
                    Ret_enuErrorStatus = MDIO_INVALID_PIN_CFG;
                }
                break;

            case MDIO_PORTD:
                if (Copy_enuConfigration == PIN_INPUT) {
                    CLEAR_BIT(DDRD, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_OUTPUT) {
                    SET_BIT(DDRD, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_INTERNAL_PULL_UP) {
                    CLEAR_BIT(DDRD, Copy_enuPinNum);
                    SET_BIT(PORTD, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else if (Copy_enuConfigration == PIN_EXTERNAL_PULL_DOWN) {
                    CLEAR_BIT(DDRD, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                } else {
                    Ret_enuErrorStatus = MDIO_INVALID_PIN_CFG;
                }
                break;

            default:
                Ret_enuErrorStatus = MDIO_INVALID_PORT_NUM;
                break;
        }
    }
    return Ret_enuErrorStatus;
}

MDIO_enuErrorStatus_t MDIO_enuSetPortConfigration(MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPortCfg_t Copy_enuConfigration) {
    MDIO_enuErrorStatus_t Ret_enuErrorStatus = MDIO_NOK;
    if (Copy_enuPortNum > MDIO_PORTD) {
        Ret_enuErrorStatus = MDIO_INVALID_PORT_NUM;
    }
    else {
        switch (Copy_enuPortNum) {
            case MDIO_PORTA:
                if (Copy_enuConfigration == PORT_INPUT) {
                    DDRA = 0x00;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_OUTPUT) {
                    DDRA = 0xFF;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_INTERNAL_PULL_UP) {
                    DDRA = 0x00;
                    PORTA = 0xFF;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_EXTERNAL_PULL_DOWN) {
                    DDRA = 0x00;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else {
                    Ret_enuErrorStatus = MDIO_INVALID_PORT_CFG;
                }
            break;
            case MDIO_PORTB:
                if (Copy_enuConfigration == PORT_INPUT) {
                    DDRB = 0x00;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_OUTPUT) {
                    DDRB = 0xFF;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_INTERNAL_PULL_UP) {
                    DDRB = 0x00;
                    PORTB = 0xFF;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_EXTERNAL_PULL_DOWN) {
                    DDRB = 0x00;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else {
                    Ret_enuErrorStatus = MDIO_INVALID_PORT_CFG;
                }
            break;
            case MDIO_PORTC:
                if (Copy_enuConfigration == PORT_INPUT) {
                    DDRC = 0x00;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_OUTPUT) {
                    DDRC = 0xFF;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_INTERNAL_PULL_UP) {
                    DDRC = 0x00;
                    PORTC = 0xFF;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_EXTERNAL_PULL_DOWN) {
                    DDRC = 0x00;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else {
                    Ret_enuErrorStatus = MDIO_INVALID_PORT_CFG;
                }
            break;
            case MDIO_PORTD:
                if (Copy_enuConfigration == PORT_INPUT) {
                    DDRD = 0x00;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_OUTPUT) {
                    DDRD = 0xFF;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_INTERNAL_PULL_UP) {
                    DDRD = 0x00;
                    PORTD = 0xFF;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuConfigration == PORT_EXTERNAL_PULL_DOWN) {
                    DDRD = 0x00;
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else {
                    Ret_enuErrorStatus = MDIO_INVALID_PORT_CFG;
                }
            break;
        }
    }
    return Ret_enuErrorStatus;
}
MDIO_enuErrorStatus_t MDIO_enuSetPinValue(MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPinNum_t Copy_enuPinNum, MDIO_enuPinState_t Copy_enuState) {
    MDIO_enuErrorStatus_t Ret_enuErrorStatus = MDIO_NOK;
    if (Copy_enuPortNum > MDIO_PORTD) {
        Ret_enuErrorStatus = MDIO_INVALID_PORT_NUM;
    }
    else if (Copy_enuPinNum > MDIO_PIN7) {
        Ret_enuErrorStatus = MDIO_INVALID_PIN_NUM;
    }
    else {
        switch (Copy_enuPortNum) {
            case MDIO_PORTA:
                if (Copy_enuState == PIN_LOW) {
                    CLEAR_BIT(PORTA, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuState == PIN_HIGH) {
                    SET_BIT(PORTA, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else {
                    Ret_enuErrorStatus = MDIO_INVALID_PIN_CFG;
                }
            break;
            case MDIO_PORTB:
                if (Copy_enuState == PIN_LOW) {
                    CLEAR_BIT(PORTB, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuState == PIN_HIGH) {
                    SET_BIT(PORTB, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else {
                    Ret_enuErrorStatus = MDIO_INVALID_PIN_CFG;
                }
            break;
            case MDIO_PORTC:
                if (Copy_enuState == PIN_LOW) {
                    CLEAR_BIT(PORTC, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuState == PIN_HIGH) {
                    SET_BIT(PORTC, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else {
                    Ret_enuErrorStatus = MDIO_INVALID_PIN_CFG;
                }
            break;
            case MDIO_PORTD:
                if (Copy_enuState == PIN_LOW) {
                    CLEAR_BIT(PORTD, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else if (Copy_enuState == PIN_HIGH) {
                    SET_BIT(PORTD, Copy_enuPinNum);
                    Ret_enuErrorStatus = MDIO_OK;
                }
                else {
                    Ret_enuErrorStatus = MDIO_INVALID_PIN_CFG;
                }
            break;
        }
    }
    return Ret_enuErrorStatus;
}
MDIO_enuErrorStatus_t MDIO_enuSetPortValue(MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPortState_t Copy_enuPortState) {
    MDIO_enuErrorStatus_t Ret_enuErrorStatus = MDIO_NOK;

    if (Copy_enuPortNum > MDIO_PORTD) {
        Ret_enuErrorStatus = MDIO_INVALID_PORT_NUM;
    } else {
        switch (Copy_enuPortNum) {
            case MDIO_PORTA:
                PORTA = Copy_enuPortState;
                Ret_enuErrorStatus = MDIO_OK;
            break;
            case MDIO_PORTB:
                PORTB = Copy_enuPortState;
                Ret_enuErrorStatus = MDIO_OK;
            break;
            case MDIO_PORTC:
                PORTC = Copy_enuPortState;
            break;
            case MDIO_PORTD:
                PORTD = Copy_enuPortState;
            break;
            default:
                Ret_enuErrorStatus = MDIO_INVALID_PORT_NUM;
            break;
        }
    }
    return Ret_enuErrorStatus;
}
MDIO_enuErrorStatus_t MDIO_enuGetPinValue(MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPinNum_t Copy_enuPinNum, u8* Add_u8PinValue) {
    MDIO_enuErrorStatus_t Ret_enuErrorStatus = MDIO_NOK;

    if (Copy_enuPortNum > MDIO_PORTD) {
        Ret_enuErrorStatus = MDIO_INVALID_PORT_NUM;
    }
    else if (Copy_enuPinNum > MDIO_PIN7) {
        Ret_enuErrorStatus = MDIO_INVALID_PIN_NUM;
    }
    else if (Add_u8PinValue == NULL) {
        Ret_enuErrorStatus = MDIO_NULL_POINTER;
    }
    else {
        switch (Copy_enuPortNum) {
            case MDIO_PORTA:
                *Add_u8PinValue = READ_BIT(PINA, Copy_enuPinNum);
            break;
            case MDIO_PORTB:
                *Add_u8PinValue = READ_BIT(PINB, Copy_enuPinNum);
            break;
            case MDIO_PORTC:
                *Add_u8PinValue = READ_BIT(PINC, Copy_enuPinNum);
            break;
            case MDIO_PORTD:
                *Add_u8PinValue = READ_BIT(PIND, Copy_enuPinNum);
            break;
            default:
                Ret_enuErrorStatus = MDIO_INVALID_PORT_NUM;
            break;
        }
    }
    return Ret_enuErrorStatus;
}