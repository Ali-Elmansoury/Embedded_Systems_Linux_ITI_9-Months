#include <stdarg.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>

#define STD_OUT_FD  1
#define BUFFER_SIZE 512

// Print function handling flexible arguments with format specifiers
void printAli(char* format, ...) {
    va_list args;
    va_start(args, format);

    char buffer[BUFFER_SIZE];
    int bufferIndex = 0;

    while (*format != '\0') {
        char temp[BUFFER_SIZE / 2];
        int length = 0;

        if (*format == '%') {
            format++; // Skip the '%' character

            switch (*format) {
                case 'd': {
                    int intVal = va_arg(args, int);
                    length = sprintf(temp, "%d", intVal);
                    break;
                }
                case 'c': {
                    char charVal = (char) va_arg(args, int);  // char is promoted to int in va_list
                    length = sprintf(temp, "%c", charVal);
                    break;
                }
                case 'f': {
                    double floatVal = va_arg(args, double);  // float is promoted to double in va_list
                    length = sprintf(temp, "%f", floatVal);
                    break;
                }
                case 's': {
                    char* stringVal = va_arg(args, char*);
                    length = sprintf(temp, "%s", stringVal); // Format string properly
                    break;
                }
                default:
                    break;
            }

            if ((bufferIndex + length) < sizeof(buffer)) {
                memcpy(&buffer[bufferIndex], temp, length);
                bufferIndex += length;
            }
        } else {
            if (bufferIndex < BUFFER_SIZE - 1) {
                buffer[bufferIndex++] = *format;
            }
        }

        format++;
    }

    va_end(args);

    // Ensure null termination and write output
    buffer[bufferIndex] = '\0';
    write(STD_OUT_FD, buffer, bufferIndex);
}

int main(int argc, char* argv[]) {
    if (argc > 1) {
        // Format string is the first argument
        char* format = argv[1];

        // Check if the format string contains any format specifiers
        if (strchr(format, '%')) {
            // Call printAli with the format string and arguments (if available)
            if (argc > 2) {
                // Call printAli with the format string and all arguments in the correct order
                printAli(format, 
                         (argc > 2) ? atoi(argv[2]) : 0,  // int
                         (argc > 3) ? argv[3][0] : ' ',  // char
                         (argc > 4) ? atof(argv[4]) : 0.0, // float
                         (argc > 5) ? argv[5] : ""); // string
            }
        } else {
            // If no format specifiers are found, print the string as is
            printAli(format);
        }
    } else {
        printAli("Error: no format string provided.");
    }

    return 0;
}
